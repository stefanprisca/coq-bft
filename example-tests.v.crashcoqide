Require Import bft.
Require Import Maps.
Require Import Coq.Lists.List.
Import ListNotations.

Definition replicas1 : SysReplicas := ("foo", fun _ _ _ => EmptyState)::EmptyReplicas.
Definition system1 := (system "foo" EmptyState replicas1).
Definition m1 := <<"foo", "1">>.
Definition twoMsgBox := [m1 ; m1].

Example sysEmptyTest : GetState (ProcessAllMessages system1 twoMsgBox) = EmptyState.
Proof. reflexivity. Qed.

Example stValid_ProcMessages_sys1 : StateValid (ProcessAllMessages system1 twoMsgBox).
Proof. constructor. reflexivity.   Qed.

Print Replica.
Print Ledger.

Definition activeReplicas : SysReplicas :=  
      ("foo" , fun sysSt msg mb => sysSt & {"foo" --> (( (GetPLoad msg) , 1 )::EmptyLedger) } )
      ::EmptyReplicas.
Definition activeSystem := (system "foo" EmptyState activeReplicas).
Example stValid_ProcMessages_sysActive : StateValid (ProcessAllMessages activeSystem twoMsgBox).
Proof.  repeat apply system_safety; constructor; reflexivity.
Qed.

Definition multipleActiveReplicas : SysReplicas :=
      ("foo" , fun sysSt msg mb => sysSt & {"foo" --> ( ((GetPLoad msg), 1 )::EmptyLedger) } )
      :: ("bar" , fun sysSt msg mb => sysSt & {"bar" --> (((GetPLoad msg), 1 )::EmptyLedger) } )
      :: ("baz" , fun sysSt msg mb => sysSt & {"baz" --> (((GetPLoad msg), 1 )::EmptyLedger) } )
      ::EmptyReplicas.

Definition multiReplicaSys := (system "" EmptyState multipleActiveReplicas).
Definition multiReplicaMsgBox := [<<"foo", "1">> ; <<"bar" , "1">>; <<"baz" , "1">>].

Example stValid_ProcMessages_multi_replicas : StateValid (ProcessAllMessages multiReplicaSys multiReplicaMsgBox).
Proof. Admitted.

Definition NFReplica : Replica := 
  fun sysSt msg mb => sysSt.


Definition nonFaultyReplicas : SysReplicas := ("primary", NFReplica)::("foo", NFReplica)
                                              ::("bar", NFReplica)::("baz", NFReplica)
                                              ::EmptyReplicas.
Definition nonFaultySystem : System := system "" EmptyState nonFaultyReplicas.

Example stValid_process_request : let sys' := (ProcessRequest nonFaultySystem "req1") in 
                                  GetGlobalLedger sys' =  Some ((GetState sys') "primary").
Proof. simpl. repeat apply system_safety; constructor; reflexivity.
Qed.



